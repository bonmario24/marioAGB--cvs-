head	1.2;
access;
symbols
	start:1.1.1.1 yoyo:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.02.23.07.17.56;	author panda;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.02.07.28.20;	author panda;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.02.07.28.20;	author panda;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/*
 * $Id: m_mini_malloc.h,v 1.8 2001-01-29 14:14:05+09 hayakawa Exp $
 * $Source: /home/hayakawa/prj/PR/libu64/RCS/m_mini_malloc.h,v $
 *              
 * malloc ライクな省メモリ型メモリアロケーションモジュール
 * 数多くのメモリを割り当てるとmallocが比例して遅くなります。
 */

#ifndef __M_MINI_MALLOC_H_
#define __M_MINI_MALLOC_H_

#include <stddef.h>

#if defined(__cplusplus)
extern "C" {
#endif
#if 0
}
#endif

    
#if 0
typedef struct cMml_memblock_header_s {
    /* private: */
    unsigned short block_size_and_flag;	/*
                                         * 全ビットが１なら終了
                                         * 上位15ビット  この構造体を含むサイズ/2
                                         * 下位１ビット: 0:not free 1:free
                                         */
} cMml_memblock_headert_t;
#else
typedef unsigned short cMml_memblock_headert_t;
#endif
typedef struct cMml_block_s {
    /* private: */
    cMml_memblock_headert_t *first_free_mb;/* !NULL:最初のフリーブロック */
    unsigned short heap_size;   /* 0-65532 ヘッダを除いたヒープサイズ */
    unsigned char status;       /* エラー情報など */
    unsigned char padding;      /* 予備 */
} cMml_block_t;

extern void cMml_Init(cMml_block_t *block, size_t size); /* 初期化 */
extern void *cMml_Malloc(cMml_block_t *block, size_t size); /* 確保 */
extern void cMml_Free(cMml_block_t *block, void *pointer); /* 解放 */
extern void cMml_GarbageCollection(cMml_block_t *block); /* 塵集め */
#if defined(LOCAL_DEBUG)
extern void cMml_DisplayArena(cMml_block_t *block);
#endif /* if defined(LOCAL_DEBUG) */

#if 0
{
#endif
#if defined(__cplusplus)
} /* extern "C" */
#endif

#endif /* __M_MINI_MALLOC_H_ */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@start
@
text
@@
