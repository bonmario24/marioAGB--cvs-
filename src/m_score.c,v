head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 yoyo:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2004.02.02.07.28.20;  author panda;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2004.02.02.07.28.20;  author panda;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 ****************************************************************
 *              
 *	スコア処理
 *
 ****************************************************************
 */
#include "m_main.h"
#include "ba_player.h"
#include "m_score.h"

const u16	OffSetDT[MAX_PLAYER] = {0x0C82,0x0CAE,0x0C90,0x0CA0};

/*
 ****************************************************************
 *	イニシャル処理
 ****************************************************************
 */
void	ScoreInit(void)
{
    u8		i;

    for( i = 0; i < 4; i++ ){
	mGm_SCORE(i) = 0;
	mGm_PLCOUNT(i) = MAX_PLCOUNT;
	mGm_DEADORDER(i) = 0;
    }
    mGm_SCORECALC = 0;
    mGm_CLASSICOUT = 0;			// 各プレイヤーのおまめ化フラグクリア

}

 /*
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	スクリーン書きこみバッファ@
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */
static	void	ScoreBuffSet(u32 score, u16 *scoreBuf)
{
    u8		i;
    const u16	numberDT[10] = {0x4140, 0x4141, 0x4142, 0x4143, 0x4144,
								0x4145, 0x4146, 0x4147, 0x4148, 0x4149};

    i = 0;
    while(score >= 100000){
	i++;
	score -= 100000;
    }
    scoreBuf[0] = numberDT[i];
    i = 0;
    while(score >= 10000){
	i++;
	score -= 10000;
    }
    scoreBuf[1] = numberDT[i];
    i = 0;
    while(score >= 1000){
	i++;
	score -= 1000;
    }
    scoreBuf[2] = numberDT[i];
    i = 0;
    while(score >= 100){
	i++;
	score -= 100;
    }
    scoreBuf[3] = numberDT[i];
    i = 0;
    while(score >= 10){
	i++;
	score -= 10;
    }
    scoreBuf[4] = numberDT[i];
    scoreBuf[5] = numberDT[(u8)score];
}
/*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	メイン処理
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 */
#define	SCORE_DEBUG	0
void	ScoreMain(void)
{
    u8		i, j, fg;
    u16		*Address;
   u16		scoreBuf[6], score;
////////    u32		TopScore;

    if( play_mode == PLAY_BATL )	// バトル？
	return;				//	YES --> return
    if( !mGm_SCORECALC )
	return;
    mGm_SCORECALC = 0;

    /******** 各プレイヤーのスコア書き込み ********/
#if SCORE_DEBUG
    for( i = 0; i < 4; i++ ){
#else
    for( i = 0; i <= mGm_PLTYPE; i++ ){
#endif
	Address = (u16 *)(BG_VRAM + BG0_ADDRESS + OffSetDT[i]);
	ScoreBuffSet(mGm_SCORE(i), scoreBuf);
	for( j = fg = 0; j < 5; j++ ){
		if( fg ){
			*Address = scoreBuf[j];
		} else {
			if( (scoreBuf[j] & 0x03FF) == 0x0140 )
				*Address = 0x4170;
			else {
				*Address = scoreBuf[j];
				fg++;
			}
		}
		Address++;
	}
	*Address = scoreBuf[5];

	Address = (u16 *)(BG_VRAM + BG0_ADDRESS + OffSetDT[i] + 0x44);
	*Address = 0x5130;
	Address++;
	*Address = 0x5111 + i;
	Address++;

    }

    /******** プレイマシンの枠書き込み ********/
    Address = (u16 *)(BG_VRAM + BG0_ADDRESS + OffSetDT[mGm_AGBNO] - 0x02);
    *(Address + 0x00) = 0x5158;
    *(Address + 0x20) = 0x590B;
	*(Address + 0x21) = 0x590C;
	*(Address + 0x22) = 0x550D;
	*(Address + 0x25) = 0x510D;
	*(Address + 0x26) = 0x590C;
    *(Address + 0x07) = 0x5558;
    *(Address + 0x27) = 0x5D0B;
	
	/******** 残機@数表示 ********/
#if SCORE_DEBUG
    for( i = 0; i < 4; i++ ){
#else
    for( i = 0; i <= mGm_PLTYPE; i++ ){
#endif
/*
	Address = (u16 *)(BG_VRAM + BG0_ADDRESS + PLOffSetDT[i]);
	if( i == mGm_AGBNO ){
	    if( mGm_AGBNO >= 2 )
		*Address = 0x591E;
	    else
		*Address = 0x511E;
	}
	Address++;
	*Address = 0x7160 + (i * 2);
	Address++;
	*Address = 0x7161 + (i * 2);
	Address++;
	*Address = 0x7168;
	Address++;
	*Address = 0x7169;
	Address++;
	*Address = 0x4140 + mGm_PLCOUNT(i);
	Address++;
	if( i == mGm_AGBNO ){
	    if( mGm_AGBNO >= 2 )
		*Address = 0x510D;
	    else
		*Address = 0x590D;
	}
*/
	if(mGm_PAUSEFG){
	    Address = (u16 *)(BG_VRAM + BG0_ADDRESS + OffSetDT[i] - 0x3E);
	    *Address = 0x7160 + (i * 2);
	    Address++;
	    *Address = 0x7161 + (i * 2);
	    Address++;
	    *Address = 0x0175;
	    Address++;
	    if( mGm_PLCOUNT(i) > 99)
		mGm_PLCOUNT(i) = 99;
	    if(mGm_PLCOUNT(i) >= 10){
		*Address = 0x4140 + mGm_PLCOUNT(i) / 10;
		Address++;
	    }else{
		*Address = 0x0000;
		Address++;
	    }
	    *Address = 0x4140 + mGm_PLCOUNT(i) % 10;
	}else{
	    Address = (u16 *)(BG_VRAM + BG0_ADDRESS + OffSetDT[i] - 0x3E);
	    *Address++ = 0x0000;
	    *Address++ = 0x0000;
	    *Address++ = 0x0000;
	    *Address++ = 0x0000;
	    *Address++ = 0x0000;
	}
    }

////////    /******** ハイスコアチェック ********/
////////    TopScore = mGm_TOPSCORE;
////////#if SCORE_DEBUG
////////    for( i = 0; i < 4; i++ ){
////////#else
////////    for( i = 0; i <= mGm_PLTYPE; i++ ){
////////#endif
////////	if( mGm_SCORE(i) > TopScore )
////////	    TopScore = mGm_SCORE(i);
////////    }
////////    mGm_TOPSCORE = TopScore;

////////    /******** ハイスコア書きこみ ********/
////////	Address = (u16 *)(BG_VRAM + BG0_ADDRESS + 0x0816);
////////	*Address = 0x5134;
////////	Address++;
////////	*Address = 0x512F;
////////	Address++;
////////	*Address = 0x5130;
////////	Address++;
////////	*Address = 0x510E;
////////	Address++;
////////	ScoreBuffSet(mGm_SCORE(i), scoreBuf);
////////	for( j = fg = 0; j < 5; j++ ){
////////	    *Address = scoreBuf[j];
////////	    Address++;
////////	}
}
@


1.1.1.1
log
@start
@
text
@@
