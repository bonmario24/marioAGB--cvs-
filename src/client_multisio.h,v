head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 yoyo:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2004.02.02.07.28.20;  author panda;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2004.02.02.07.28.20;  author panda;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/********************************************************************/
/*          MultiSio.h                                              */
/*            マルチプレイ通信ライブラリ外部宣言                    */
/*            （タイマー割り込み送信バージョン）                    */
/*                                                                  */
/*          Copyright (C) 1999-2000 NINTENDO Co.,Ltd.               */
/********************************************************************/
#ifndef _CLIENT_MULTISIO_H
#define _CLIENT_MULTISIO_H

#ifdef __cplusplus
extern "C" {
#endif

#include <Agb.h>


// 下記の設定値はソフトの仕様に合わせて最適化して下さい。

// 通信データブロックサイズが小さければ、
// レートを落として割り込み回数を減らして下さい。
#define MULTI_SIO_BAUD_RATE         SIO_115200_BPS  // ボーレート

#define MULTI_SIO_SYNC_DATA         0xFEFE // 同期データ（0x0000と0xFFFFは禁止）
#define MULTI_SIO_END_DATA          0xF800 // 終了データ（0x0000と0xFFFFは禁止）

#define MULTI_SIO_TIMER_NO          3                   // タイマーＮｏ
#define MULTI_SIO_TIMER_COUNT1       0x6000              // タイマーカウント数
#define MULTI_SIO_TIMER_COUNT2       0x0C80              // タイマーカウント数
#define MULTI_SIO_TIMER_INTR_FLAG   \
            (TIMER0_INTR_FLAG << MULTI_SIO_TIMER_NO)    // タイマー割り込みフラグ
#define REG_MULTI_SIO_TIMER         \
            (REG_TM0CNT + MULTI_SIO_TIMER_NO * 4)       // タイマーレジスタ


#define MULTI_SIO_DI_FUNC_FAST              // SIO割り込み関数RAM実行フラグ

#ifdef MULTI_SIO_DI_FUNC_FAST
extern u32 SioIntrFunc[0x1000/4];       // 割り込みルーチンRAM実行用バッファ@
//extern u8 SioIntrFunc[0x1000];       // 割り込みルーチンRAM実行用バッファ@
#endif


/*------------------------------------------------------------------*/
/*                      マルチプレイ通信初期化                      */
/*------------------------------------------------------------------*/

extern void MultiSioInit(void);
//extern void Sio32Init_0(void);
//extern void Sio32Init_1(void);
extern void Sio32Init_2(void);
//・シリアル通信モードをマルチプレイモードにします。
//・レジスタやバッファ@の初期化を行ないます。

/*------------------------------------------------------------------*/
/* 		    マルチプレイ通信割り込み			    */
/*------------------------------------------------------------------*/

extern void MultiSioIntr(void);

//・通信割り込み時に各本体からの受信データを各受信バッファ@へ格納し、
//  送信バッファ@のデータをレジスタへセットします。
//・親機@は SIO_SEND_WAIT_COUNT 回のループでウェイトした後、送信を再開します。
//
//・通信割り込み時に呼ばれるようにプログラミングして下さい。
//・必ず１パケット（OverRunCatch[]以外）が１フレームで転送できるように
//  設定値を調整して下さい。


/*--------------- 通信モード定義 ------------------*/

enum {
    NotConnect,	//0
    MultiSync,	//1
    Sio32WaitC0,//2
    Sio32WaitC1,//3
    Sio32WaitP0,//4
    Sio32WaitP1,//5
    Sio32WaitP2,//6
    Sio32WaitP3,//7
    Sio32WaitP4,//8
    Sio32Init,	//9
    Sio32Trance,//A
    MultiWaitP0,//B
    MultiWaitP1,//C
    MultiInitP,	//D
    MultiCheck,	//E
    VramTrance,	//F
};



#ifdef __cplusplus
}      /* extern "C" */
#endif

#endif /* _CLIENT_MULTISIO_H */
@


1.1.1.1
log
@start
@
text
@@
