head	1.2;
access;
symbols
	start:1.1.1.1 yoyo:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.02.23.07.17.56;	author panda;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.02.07.28.22;	author panda;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.02.07.28.22;	author panda;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/****************************************************************/
/*	マリオＵＳＡ　@セレクト画面用サブプログラム		*/
/****************************************************************/
#include "ua_common.h"
#include "m_sub.h"
#include "ud_cad.h"
#include "um_select_sub.h"
#include "um_math.h"
#include "ua_score.h"
#include "ua_commondt.h"

aAll_PlSel_c	*p_sel;

static u16 ParamChr_Tbl[] = {		// modified by Yu Ting
/*//  x:      y:      Chr     shape size
    0x000C, 0x0095, 0x0100, 0x0100, // POW
    0x001C, 0x0095, 0x0102, 0x0000, // ER
    0x0059, 0x0095, 0x0103, 0x0100, // SPEE
    0x0069, 0x0095, 0x0105, 0x0000, // ED
    0x00A2, 0x0095, 0x0120, 0x0100, // JUM
    0x00B2, 0x0095, 0x0122, 0x0000, // P
*/

	0x000C, 0x0095, 0x016E, 0x0100, // 
    0x001C, 0x0095, 0x0170, 0x0000, // 
    0x0059, 0x0095, 0x01AE, 0x0100, // 
    0x0069, 0x0095, 0x01B0, 0x0000, // 
    0x00A2, 0x0095, 0x01EE, 0x0100, // 
    0x00B2, 0x0095, 0x01F0, 0x0000, // 

	0x000C, 0x008D, 0x014E, 0x0100, // 
    0x001C, 0x008D, 0x0150, 0x0000, // 
    0x0059, 0x008D, 0x018E, 0x0100, // 
    0x0069, 0x008D, 0x0190, 0x0000, // 
    0x00A2, 0x008D, 0x01CE, 0x0100, // 
    0x00B2, 0x008D, 0x01D0, 0x0000, // 

};
static u16 PLEASE_Tbl[] = {
//  x:      y:      Chr     shape size
/*	
	0x0000, 0x0000, 0x0112, 0x0000, // C
    0x0008, 0x0000, 0x0117, 0x0000, // H
    0x0010, 0x0000, 0x011E, 0x0000, // O
    0x0018, 0x0000, 0x011E, 0x0000, // O
    0x0020, 0x0000, 0x0127, 0x0000, // S
    0x0028, 0x0000, 0x0114, 0x0000, // E

    0x0038, 0x0000, 0x0110, 0x0000, // A

    0x0048, 0x0000, 0x011F, 0x0000, // P
    0x0050, 0x0000, 0x011B, 0x0000, // L
    0x0058, 0x0000, 0x0110, 0x0000, // A
    0x0060, 0x0000, 0x012D, 0x0000, // Y
    0x0068, 0x0000, 0x0114, 0x0000, // E
    0x0070, 0x0000, 0x0126, 0x0000, // R
*/
    0x0024, 0x0000, 0x020E, 0x0100, // 
	0x0034, 0x0000, 0x0210, 0x0100, // 
	0x0044, 0x0000, 0x0212, 0x0100, // 
    0x0024, 0x0008, 0x022E, 0x0100, // 
    0x0034, 0x0008, 0x0230, 0x0100, // 
    0x0044, 0x0008, 0x0232, 0x0100, // 
};

static u16 MARIO_Tbl[] = {
    0x000D, // loop 回数
//  x:      Chr   
    0x0000, 0x0188, // 
    0x0008, 0x0189, // 
    0x0010, 0x018A, // 
    0x0018, 0x018B, // 
    0x0020, 0x018C, // 
	0x0028, 0x018D, // 

	0x0030, 0x0125, // X

    0x0000, 0x01A8, // 
    0x0008, 0x01A9, // 
    0x0010, 0x01AA, // 
    0x0018, 0x01AB, // 
    0x0020, 0x01AC, // 
	0x0028, 0x01AD, // 

};
static u16 LUIGI_Tbl[] = {
    0x000D, // loop 回数
//  x:      Chr    
    0x0000, 0x0148, // 
    0x0008, 0x0149, // 
    0x0010, 0x014A, // 
    0x0018, 0x014B, // 
    0x0020, 0x014C, // 
	0x0028, 0x014D, // 

	0x0030, 0x0125, // X

    0x0000, 0x0168, // 
    0x0008, 0x0169, // 
    0x0010, 0x016A, // 
    0x0018, 0x016B, // 
    0x0020, 0x016C, // 
	0x0028, 0x016D, // 
};
static u16 KINOPIO_Tbl[] = {
    0x000D, // loop 回数
//  x:      Chr     
    0x0000, 0x0208, // 
    0x0008, 0x0209, // 
    0x0010, 0x020A, // 
    0x0018, 0x020B, // 
    0x0020, 0x020C, // 
	0x0028, 0x020D, // 

	0x0030, 0x0125, // X

    0x0000, 0x0228, // 
    0x0008, 0x0229, // 
    0x0010, 0x022A, // 
    0x0018, 0x022B, // 
    0x0020, 0x022C, // 
	0x0028, 0x022D, // 
};
static u16 PEACH_Tbl[] = {
    0x000D, // loop 回数
//  x:      Chr     
    0x0000, 0x01C8, // 
    0x0008, 0x01C9, // 
    0x0010, 0x01CA, // 
    0x0018, 0x01CB, // 
    0x0020, 0x01CC, // 
	0x0028, 0x01CD, // 

	0x0030, 0x0125, // X

    0x0000, 0x01E8, // 
    0x0008, 0x01E9, // 
    0x0010, 0x01EA, // 
    0x0018, 0x01EB, // 
    0x0020, 0x01EC, // 
	0x0028, 0x01ED, // 
};
static u16 *NAME_Tbl[] = {
    MARIO_Tbl,
    PEACH_Tbl,
    KINOPIO_Tbl,
    LUIGI_Tbl,
};

static u16 ScoreChr_Tbl[] = {
//  x:      y:      Chr
    0x0030, 0x0094, 0x0127, // S
    0x0038, 0x0094, 0x0112, // C
    0x0040, 0x0094, 0x011E, // O
    0x0048, 0x0094, 0x0126, // R
    0x0050, 0x0094, 0x0114, // E
};

static u16 PlSel_Tbl[0x8] = {
//  mario peach kino  luigi 
    0x00, 0x18, 0x10, 0x08, // 通常
    0x140, 0x1C, 0x14, 0x0C, // 手を上げてる
};

static u8 Mono_tbl[4] = {
//  mario peach kino  luigi 
    4,    6,    5,    4
};

static u8 Param_Tbl[0xC] = {
//  mario peach kino  luigi 
    0x03, 0x01, 0x04, 0x02, // power
    0x03, 0x01, 0x04, 0x02, // speed
    0x03, 0x02, 0x01, 0x04, // jump
};

static u16 Song_Tbl[4] = {
    s_u_mario_here_i_come,
    s_u_peach_leave_it_to_me,
    s_u_toad_ok,
    s_u_luigi_here_we_go
};

static u8 pl_tbl[4] = {
    0, 3, 2, 1,
};

#if 0
static u32 Pltt_A[0x40] = {
// Mario 00
    0x294a,0x7fff,0x14cb,0x7def,0x2a9f,0x29d7,0x573f,0x5bbf,
    0x39df,0x152f,0x5ca5,0x754a,0x7eb4,0x52bf,0x14b6,0x211c,
// Luigi 01
    0x294a,0x7fff,0x14cb,0x7def,0x2a9f,0x29d7,0x573f,0x5bbf,
    0x1cfd,0x152f,0x5ca5,0x754a,0x7eb4,0x6bb0,0x4f2e,0x3a66,
// Kinopio 02
    0x294a,0x7fff,0x14cb,0x40b2,0x6413,0x7d5a,0x4eff,0x5bbf,
    0x2a57,0x0d2f,0x19d5,0x78b8,0x6bff,0x3a1f,0x1cfd,0x319f,
// Peach 03
    0x294a,0x7fff,0x14cb,0x20fb,0x2a9f,0x33ff,0x4eff,0x5bbf,
    0x5969,0x7650,0x1a38,0x277f,0x53ff,0x777f,0x66ff,0x359f,
};
static u32 Pltt_B[0x40] = {
// Mario 00
    0x0000,0x4e73,0x0000,0x4c21,0x0113,0x004b,0x25b3,0x2a33,
    0x0853,0x0003,0x2400,0x3c00,0x4ce6,0x2133,0x000a,0x0010,
// Luigi 01
    0x0000,0x4e73,0x0000,0x4c21,0x0113,0x004b,0x25b3,0x2a33,
    0x0011,0x0003,0x2400,0x3c00,0x4ce6,0x3a24,0x1da2,0x08e0,
// Kinopio 02
    0x0000,0x4e73,0x0000,0x1006,0x3407,0x4c0e,0x1d73,0x2a33,
    0x00cb,0x0003,0x0049,0x480c,0x3a73,0x0893,0x0011,0x0013,
// Peach 03
    0x0000,0x4e73,0x0000,0x000f,0x0113,0x0273,0x1d73,0x2a33,
    0x2800,0x44c4,0x00ac,0x01f3,0x2273,0x45f3,0x3573,0x0413,
};
#endif
static u32 Pltt_D[0x80] = {
    0x000A0A0A, 0x001F1F1F, 0x0005060B, 0x001F0F0F,
    0x000A141F, 0x000A0E17, 0x0015191F, 0x00161D1F,
    0x000E0E1F, 0x0005090F, 0x00170505, 0x001D0A0A,
    0x001F1514, 0x0014151F, 0x00050516, 0x0008081C,
    0x000A0A0A, 0x001F1F1F, 0x0005060B, 0x001F0F0F,
    0x000A141F, 0x000A0E17, 0x0015191F, 0x00161D1F,
    0x0007071D, 0x0005090F, 0x00170505, 0x001D0A0A,
    0x001F1514, 0x001A1D10, 0x0013190E, 0x000E1306,
    0x000A0A0A, 0x001F1F1F, 0x0005060B, 0x00100512,
    0x00190013, 0x001F0A1A, 0x0013171F, 0x00161D1F,
    0x000A1217, 0x0003090F, 0x00060E15, 0x001E0518,
    0x001A1F1F, 0x000E101F, 0x0007071D, 0x000C0C1F,
    0x000A0A0A, 0x001F1F1F, 0x0005060B, 0x0008071B,
    0x000A141F, 0x000C1F1F, 0x0013171F, 0x00161D1F,
    0x00160B09, 0x001D1210, 0x00061118, 0x00091B1F,
    0x00141F1F, 0x001D1B1F, 0x0019171F, 0x000D0C1F,
    0x00000000, 0x00131313, 0x00000000, 0x00130101,
    0x00000813, 0x0000020B, 0x00090D13, 0x000A1113,
    0x00020213, 0x00000003, 0x00090000, 0x000F0000,
    0x00130706, 0x00080913, 0x0000000A, 0x00000010,
    0x00000000, 0x00131313, 0x00000000, 0x00130101,
    0x00000813, 0x0000020B, 0x00090D13, 0x000A1113,
    0x00000011, 0x00000003, 0x00090000, 0x000F0000,
    0x00130706, 0x000E1104, 0x00070D02, 0x00020700,
    0x00000000, 0x00131313, 0x00000000, 0x00040006,
    0x000D0007, 0x0013000E, 0x00070B13, 0x000A1113,
    0x0000060B, 0x00000003, 0x00000209, 0x0012000C,
    0x000E1313, 0x00020413, 0x00000011, 0x00000013,
    0x00000000, 0x00131313, 0x00000000, 0x0000000F,
    0x00000813, 0x00001313, 0x00070B13, 0x000A1113,
    0x000A0000, 0x00110604, 0x0000050C, 0x00000F13,
    0x00081313, 0x00110F13, 0x000D0B13, 0x00010013,
};

/*--------------------------------------------------------------*/
/*	２桁までの数字の表示					*/
/*	（キャラが０〜９まで連続で入っていることを前提とする）	*/
/*--------------------------------------------------------------*/
void Drw_Number( u8 i_No, u32 i_Base, 
		 u16 i_Drw_pnt, u16 i_Chr_pnt, u16 i_blank )
{
    u8 t_ten, t_one;
    
    t_ten = Div(i_No, 10);
    t_one = i_No - t_ten*10;
    if( t_ten ){
	*(u16 *)(BG_VRAM+i_Base+i_Drw_pnt)   = (i_Chr_pnt+t_ten);
	*(u16 *)(BG_VRAM+i_Base+i_Drw_pnt+2) = (i_Chr_pnt+t_one);
    }
    else{
	*(u16 *)(BG_VRAM+i_Base+i_Drw_pnt) = i_blank;
	*(u16 *)(BG_VRAM+i_Base+i_Drw_pnt+2)   = (i_Chr_pnt+t_one);
    }
}

/*--------------------------------------------------------------*/
/*	コースセレクト画面カーソル位置計算			*/
/*--------------------------------------------------------------*/
u16 Get_Drw_pnt( u16 i_chpt, u16 i_course ){
    u16 t_Drw_pnt;
    
    if( i_chpt < 4 ){
	if( i_course == 0 ){
	    t_Drw_pnt = 0x184 + i_chpt*0xE;
	}
	else if( i_course == 1 ){
	    t_Drw_pnt = 0x204 + i_chpt*0xE;
	}
	else{
	    t_Drw_pnt = 0x284 + i_chpt*0xE;
	}
    }
    else{
	if( i_course == 0 ){
	    t_Drw_pnt = 0x30A + i_chpt*0x10;
	}
	else if( i_course == 1 ){
	    t_Drw_pnt = 0x38A + i_chpt*0x10;
	}
	else{
	    t_Drw_pnt = 0x40A + i_chpt*0x10;
	}
    }
    return t_Drw_pnt;
}

/*--------------------------------------------------------------*/
/*		圧縮されたデータの展開(u16)			*/
/*--------------------------------------------------------------*/
void TENKAI( u16 *i_data, u16 *o_data )
{
    u16 t_i = 0, t_j;
    u16 t_LoopMax;
    u16 t_ConvdataNo = 0;
    
    while( *(i_data+t_i) != 0 ){
	if( (*(i_data+t_i)&0xC000) == 0x8000 ){
	    t_LoopMax = (*(i_data+t_i)&0x3FFF);
	    for( t_j = 0; t_j < t_LoopMax; t_j++ ){
		*(o_data+t_ConvdataNo) = 
		     *(i_data+t_i+1);
		t_ConvdataNo++;
	    }
	    t_i += 2;
	}
	else if( (*(i_data+t_i)&0xC000) == 0x4000 ){
	    t_LoopMax = (*(i_data+t_i)&0x3FFF);
	    for( t_j = 0; t_j < t_LoopMax; t_j++ ){
		*(o_data+t_ConvdataNo) = 
		     *(i_data+t_i+1);
		t_ConvdataNo++;
		*(o_data+t_ConvdataNo) = 
		     *(i_data+t_i+2);
		t_ConvdataNo++;
	    }
	    t_i += 3;
	}
	else{
	    t_LoopMax = (*(i_data+t_i)&0x3FFF);
	    for( t_j = 0; t_j < t_LoopMax; t_j++ ){
		*(o_data+t_ConvdataNo) = 
		     *(i_data+t_i+t_j+1);
		t_ConvdataNo++;
	    }
	    t_i += (t_LoopMax+1);
	}
    }
}

/*--------------------------------------------------------------*/
/*		プレイヤー選択用OBJイニシャル			*/
/*--------------------------------------------------------------*/
void player_sel_obj_init( void )
{
    Pl_Sel_c *sel_pt;
    u8 t_i;

/*  領域確保 */
    mGm_MALLOC_p_sel();

    PLSEL_MODE = STOP_sl;
    PLSEL_PLCHR = PLAY_PLSYNO;
    PLSEL_ANGLE = 0x4000+pl_tbl[PLAY_PLSYNO]*0x4000;

    for( t_i = 0; t_i < 4; t_i++ ){
	sel_pt = &(PSBASE[t_i]);
	PLSEL_XPOS(sel_pt) = 
	    0x68+((Cos16(PLSEL_ANGLE+(t_i*0x4000))*0x3000)>>16);
	PLSEL_YPOS(sel_pt) = 
	    0x39+((Sin16(PLSEL_ANGLE+(t_i*0x4000))*0x7E0)>>16);
	PLSEL_HSIZE(sel_pt) = 
	    0x170-((Sin16(PLSEL_ANGLE+(t_i*0x4000))*0x7000)>>16);
	PLSEL_VSIZE(sel_pt) = PLSEL_HSIZE(sel_pt);
	if( t_i == PLAY_PLSYNO ){
	    PLSEL_PTRN(sel_pt) = 1;
	}
	else{
	    PLSEL_PTRN(sel_pt) = 0;
	}
    }
}

/*--------------------------------------------------------------*/
/*		プレイヤー選択用OBJムーブ			*/
/*--------------------------------------------------------------*/
void player_sel_obj_move( void )
{
    u8 t_i;
    Pl_Sel_c *sel_pt;

    if( PLSEL_MODE == ROTATE_sl ){
	PLSEL_ANGLE += PLSEL_RATE;
	for( t_i = 0; t_i < 4; t_i++ ){
	    sel_pt = &(PSBASE[t_i]);
	    PLSEL_XPOS(sel_pt) = 
		0x68+((Cos16(PLSEL_ANGLE+(t_i*0x4000))*0x3000)>>16);
	    PLSEL_YPOS(sel_pt) = 
		0x39+((Sin16(PLSEL_ANGLE+(t_i*0x4000))*0x7E0)>>16);
	    PLSEL_HSIZE(sel_pt) = 
		0x170-((Sin16(PLSEL_ANGLE+(t_i*0x4000))*0x7000)>>16);
	    PLSEL_VSIZE(sel_pt) = PLSEL_HSIZE(sel_pt);
	    PLSEL_PTRN(sel_pt) = 0;
	}

	if( PLSEL_ANGLE&0x2000 ){	// BG0上昇
	    usa_game->work[1] = 0x20-((PLSEL_ANGLE&0x1FFF)>>8);
	}
	else{				// BG0下降
	    usa_game->work[1] = (PLSEL_ANGLE&0x1FFF)>>8;
	}
	IRQ_NO = irq_title;
	NMI_NO = nmi_divide;
	*(vu16 *)REG_IE = V_COUNT_INTR_FLAG;
	*(vu16 *)REG_STAT = 0x8000 | STAT_V_COUNT_IF_ENABLE | STAT_V_BLANK_IF_ENABLE;


	for( t_i = 0; t_i < 4; t_i++ ){
	    if( PSBASE[PLSEL_PLCHR].hsize > PSBASE[t_i].hsize ){
		PLSEL_PLCHR = t_i;
	    }
	}
	if( (PLSEL_ANGLE&0x3FFF) == 0 ){
	    PLSEL_MODE = STOP_sl;
	    PLSEL_RATE = 0;
	}
    }
    else{
	if( L_KEY_ON_T || R_KEY_ON_T || SELECT_BUTTON_ON ){
	    if( L_KEY_ON_T ){
		m4aSongNumStart(s_u_se_coin);
		PLSEL_RATE = -0x200;
		PLSEL_MODE = ROTATE_sl;
		return;
	    }
	    else{
		m4aSongNumStart(s_u_se_coin);
		PLSEL_RATE = 0x200;
		PLSEL_MODE = ROTATE_sl;
		return;
	    }
	}
	else if( game.Trg & (START_BUTTON|A_BUTTON) ){
	    mGm_GMMODE++;
	    m4aSongNumStart(s_u_se_kettei);
	    PLAY_PLSYNO = PLSEL_PLCHR;
	    m4aSongNumStart(Song_Tbl[PLAY_PLSYNO]);
	    PSBASE[PLAY_PLSYNO].patrn = 2;
	}
    }
    Color_Change();
}

/*--------------------------------------------------------------*/
/*		プレイヤー選択用OBJセット			*/
/*--------------------------------------------------------------*/
void player_sel_obj_oamset( void )
{
    u8  t_i,affinpt = 0;
    u32 loop_ct,i;
    u16 *enmy_pt;
    OamData *p_oam;
    Pl_Sel_c *sel_pt;
    
    PLSEL_IPT = 0;

    // マリオ用
    sel_pt = &(PSBASE[0]);
    p_oam = &OamBak[PLSEL_IPT];
    
    p_oam->HPos = PLSEL_XPOS(sel_pt)-0x10;	// Ｘ座標
    if( PLSEL_HSIZE(sel_pt) >= 0x101 &&
	PLSEL_HSIZE(sel_pt) <= 0x107 ){
	p_oam->VPos = PLSEL_YPOS(sel_pt)-1;	// Ｙ座標
    }
    else{
	p_oam->VPos = PLSEL_YPOS(sel_pt);	// Ｙ座標
    }
    p_oam->Shape = 0;		// ＯＢＪ形状
    p_oam->Size = 3;		// ＯＢＪサイズ
    p_oam->Priority = 3;
    p_oam->VFlip = 0;
    p_oam->HFlip = 0;
    if( PLSEL_PTRN(sel_pt) == 2 )
	p_oam->CharNo = PlSel_Tbl[4];
    else
	p_oam->CharNo = PlSel_Tbl[0];
    
    p_oam->Pltt = pl_tbl[0]; // 値が同じなんで代用
    
    p_oam->AffineMode = 1;
    p_oam->AffineParamNo_L = affinpt >> 2;
    Sraffp.RatioX = PLSEL_HSIZE(sel_pt);
    Sraffp.RatioY = PLSEL_VSIZE(sel_pt);
    Sraffp.Theta = 0;
    a_affinset(affinpt);
    affinpt += 0x04;
    PLSEL_IPT++;
    
    // マリオ以外用
    for( t_i = 1; t_i < 4; t_i++ ){
	sel_pt = &(PSBASE[t_i]);
	p_oam = &OamBak[PLSEL_IPT];
	
	p_oam->HPos = PLSEL_XPOS(sel_pt);	// Ｘ座標
	if( PLSEL_HSIZE(sel_pt) >= 0x101 &&
	    PLSEL_HSIZE(sel_pt) <= 0x107 ){
	    p_oam->VPos = PLSEL_YPOS(sel_pt)-1;	// Ｙ座標
	}
	else{
	    p_oam->VPos = PLSEL_YPOS(sel_pt);	// Ｙ座標
	}
	p_oam->Shape = 2;		// ＯＢＪ形状
	p_oam->Size = 3;		// ＯＢＪサイズ
	p_oam->Priority = 3;
	p_oam->VFlip = 0;
	p_oam->HFlip = 0;
	if( PLSEL_PTRN(sel_pt) == 2 )
	    p_oam->CharNo = PlSel_Tbl[t_i+4];
	else
	    p_oam->CharNo = PlSel_Tbl[t_i];

//	if( PLSEL_PTRN(sel_pt) != 0 ){
//	    p_oam->Pltt = pl_tbl[t_i]; // 値が同じなんで代用
//	}
//	else{
//	    p_oam->Pltt = Mono_tbl[t_i];
//	}

	p_oam->Pltt = pl_tbl[t_i]; // 値が同じなんで代用

	p_oam->AffineMode = 1;
	p_oam->AffineParamNo_L = affinpt >> 2;
	Sraffp.RatioX = PLSEL_HSIZE(sel_pt);
	Sraffp.RatioY = PLSEL_VSIZE(sel_pt);
	Sraffp.Theta = 0;
	a_affinset(affinpt);
	affinpt += 0x04;
	PLSEL_IPT++;
    }
    // CHOOSE A PLAYER
    for( t_i = 0; t_i < 6; t_i++ ){
	p_oam = &OamBak[PLSEL_IPT];
	
	p_oam->HPos = 61+PLEASE_Tbl[t_i<<2];		// Ｘ座標
	p_oam->VPos = 47+PLEASE_Tbl[(t_i<<2)+1];	// Ｙ座標
	p_oam->Shape = PLEASE_Tbl[(t_i<<2)+3]>>8;
	p_oam->Size = PLEASE_Tbl[(t_i<<2)+3]&0xFF;

//	p_oam->Shape = 0;
//	p_oam->Size = 0;
	p_oam->CharNo = PLEASE_Tbl[(t_i<<2)+2];
	p_oam->Pltt = 8;
	PLSEL_IPT++;
    }
    // パラメータセット
//    if( PLSEL_MODE == STOP_sl )
    param_oam_set( PLSEL_PLCHR );
    // 並び替え
    player_sel_obj_sort();
}

/*--------------------------------------------------------------*/
/*		アクター構造体クリア				*/
/*--------------------------------------------------------------*/
void act_clear( void )
{
    u8 t_i, *fgpt;

    // 敵構造体の初期化
    for( t_i = 0; t_i < A_ENMY_NO; t_i++ ){
	ENTY_ENBASE(p_act)[t_i] = abase_clear;
	ENTY_ENCMOD(p_act)[t_i] = DUMMY;
	ENTY_ENSYNO(p_act)[t_i] = 0;
	ENTY_SCRDTNO(p_act)[t_i] = 0;
	ENMY_OAMNO(p_act)[t_i] = 0;
    }
    // 敵の出現フラグの初期化
    fgpt = ENMY_SETFG(p_act); 
    for( t_i = 0; t_i < 64; t_i++ ){
	*fgpt = 0; 
	*fgpt++;
    }
    ENTY_OAMPT(p_act) = 0;
    ENTY_AFBPT(p_act) = 0;

    /*** act構造体クリア ***/
    EXITFG = 0;
    EXCONT = 0;
    EXTIME = 0;
    EXOPEN = 0;
    ESETFG = 0;
    FIRESCT = 0;
    FAILCNT = 0;
    DREAMCT = 0;
    BSDMCRL = 0;
    MSMODE = 0;
    // CASALIN_FG = 0;
    BUBBLECT = 0;
    BOSS_DEMOTIM = 0;
    EGG_DEMOTIM = 0;
    CLEAR_EXIT = 0;
    CLEAR_CNT = 0;
    BGMSTART = 0;
    EGGMODE = 0;
    EGGMT_YPOS = 0;
    EGGMT_YSPD = 0;
    EGGMT_TIM = 0;
    AKADAMA_FG = 0;

    /*** usa_game構造体クリア ***/
    YOSHI_EGG = 0;
    
    /*** PL無敵HITCNT ***/
    HITCNT = 0;
    
    m_eggmeter_clear();
    m_score_clear();		// エフェクト構造体クリア
}

/*--------------------------------------------------------------*/
/*		スコアスクリーンセット				*/
/*	i_No	:表示する値					*/
/*	i_Base	:表示する位置(スクリーンのベースアドレス)	*/
/*	i_Drw_pnt:最下位桁の表示位置(ベースからのアドレス)	*/
/*	i_Chr_pnt:数字のキャラクタ開始位置			*/
/*	i_blank	:ブランク用のキャラクタNo			*/
/*--------------------------------------------------------------*/
void score_ssc_set( u32 i_No, u32 i_Base, 
		    u16 i_Drw_pnt, u16 i_Chr_pnt, u16 i_blank )
{
    u8 t_i;
    u32	t_Score;
    u8	t_Rem;

    t_Score = i_No;
    *(vu16 *)(i_Base+i_Drw_pnt) = i_Chr_pnt;
    if( t_Score == 0 ){
	return;
    }

    t_i = 1;
    while( 1 ){
	t_Rem = DivRem(t_Score,10);
	*(vu16 *)(i_Base+i_Drw_pnt-(t_i<<1)) = (i_Chr_pnt+t_Rem);
	t_Score = Div(t_Score,10);
	if( t_Score == 0 )
	    break;
	t_i++;
    }
}

/*--------------------------------------------------------------*/
/*		プレイヤー選択用OBJ並び替え			*/
/*--------------------------------------------------------------*/
void player_sel_obj_sort( void )
{

    u8 t_i, big_chr = 0;

    ObjVanishTemp();

    for( t_i = 0; t_i < 4; t_i++ ){
	if( PSBASE[big_chr].hsize > PSBASE[t_i].hsize ){
	    big_chr = t_i;
	}
    }
    for( t_i = 0; t_i < PLSEL_IPT; t_i++ ){
	OAMTEMP[t_i] = OamBak[t_i];
    }
    OAMTEMP[0] = OamBak[big_chr];
    OAMTEMP[1] = OamBak[(big_chr+1)&0x3];
    OAMTEMP[2] = OamBak[(big_chr+3)&0x3];
    OAMTEMP[3] = OamBak[(big_chr+2)&0x3];
    for( t_i = 0; t_i < 0x10; t_i++ ){
	OAMTEMP[t_i].AffineParam = OamBak[t_i].AffineParam;
    }
    for( t_i = 0; t_i < PLSEL_IPT; t_i++ ){
	OamBak[t_i] = OAMTEMP[t_i];
    }
}
/*--------------------------------------------------------------*/
/*		プレイヤーパラメータOAMセット			*/
/*--------------------------------------------------------------*/
void param_oam_set( u8 SEL_CHR )
{
    u8 t_i;
    u16 loop_ct;
    u16 *name_pt;
    OamData *p_oam;
    u8 PLW1;

    PLW1 = usa_game->work[1];
    // 文字セット
    for( t_i = 0; t_i < 12; t_i++ ){
	p_oam = &OamBak[PLSEL_IPT];
	
	p_oam->HPos = ParamChr_Tbl[t_i<<2];	// Ｘ座標
	p_oam->VPos = ParamChr_Tbl[(t_i<<2)+1]+PLW1;	// Ｙ座標
	p_oam->Shape = ParamChr_Tbl[(t_i<<2)+3]>>8;
	p_oam->Size = ParamChr_Tbl[(t_i<<2)+3]&0xFF;
	p_oam->CharNo = ParamChr_Tbl[(t_i<<2)+2];
	p_oam->Pltt = 7;
	PLSEL_IPT++;
    }

    // パラメータスターセット
    // POWER
    for( t_i = 0; t_i < 5; t_i++ ){
	p_oam = &OamBak[PLSEL_IPT];
	p_oam->HPos = 0x28+(t_i<<3);	// Ｘ座標
	p_oam->VPos = 0x95+PLW1;	// Ｙ座標
	p_oam->Shape = 0;		// ＯＢＪ形状
	p_oam->Size = 0;		// ＯＢＪサイズ
	p_oam->Priority = 0;
	p_oam->VFlip = 0;
	p_oam->HFlip = 0;
	if( t_i <= Param_Tbl[SEL_CHR+0] ){
	    p_oam->CharNo = 0x123;
	}
	else{
	    p_oam->CharNo = 0x124;
	}
	p_oam->Pltt = 7;
	PLSEL_IPT++;
    }
    // SPEED
    for( t_i = 0; t_i < 5; t_i++ ){
	p_oam = &OamBak[PLSEL_IPT];
	p_oam->HPos = 0x73+(t_i<<3);	// Ｘ座標
	p_oam->VPos = 0x95+PLW1;	// Ｙ座標
	p_oam->Shape = 0;		// ＯＢＪ形状
	p_oam->Size = 0;		// ＯＢＪサイズ
	p_oam->Priority = 0;
	p_oam->VFlip = 0;
	p_oam->HFlip = 0;
	if( t_i <= Param_Tbl[SEL_CHR+4] ){
	    p_oam->CharNo = 0x123;
	}
	else{
	    p_oam->CharNo = 0x124;
	}
	p_oam->Pltt = 7;
	PLSEL_IPT++;
    }
    // JUMP
    for( t_i = 0; t_i < 5; t_i++ ){
	p_oam = &OamBak[PLSEL_IPT];
	p_oam->HPos = 0xBA+(t_i<<3);	// Ｘ座標
	p_oam->VPos = 0x95+PLW1;	// Ｙ座標
	p_oam->Shape = 0;		// ＯＢＪ形状
	p_oam->Size = 0;		// ＯＢＪサイズ
	p_oam->Priority = 0;
	p_oam->VFlip = 0;
	p_oam->HFlip = 0;
	if( t_i <= Param_Tbl[SEL_CHR+8] ){
	    p_oam->CharNo = 0x123;
	}
	else{
	    p_oam->CharNo = 0x124;
	}
	p_oam->Pltt = 7;
	PLSEL_IPT++;
    }
    // CHARACTER NAME
    name_pt = NAME_Tbl[SEL_CHR];
    loop_ct = *name_pt;
    name_pt++;
    for( t_i = 0; t_i < loop_ct; t_i++ ){
	p_oam = &OamBak[PLSEL_IPT];
	
//	if( SEL_CHR != 2 ){
	    p_oam->HPos = 0x50+*name_pt;	// Ｘ座標
/*	}
	else{
	    p_oam->HPos = 0x60+*name_pt;	// Ｘ座標
	}
*/
	name_pt++;
	if (t_i==6)
		p_oam->VPos = 137+PLW1;			// Ｙ座標
	else if (t_i<6)
		p_oam->VPos = 130+PLW1;			// Ｙ座標
	else
		p_oam->VPos = 138+PLW1;			// Ｙ座標

	p_oam->CharNo = *name_pt;
	name_pt++;
	p_oam->Pltt = 8;
	PLSEL_IPT++;
    }
    // 残数表示
    for( t_i = 0; t_i < 2; t_i++ ){
	if( t_i == 0 ){
	    if( mGm_PLCNT < 10 ) 
		continue;
	    loop_ct = Div(mGm_PLCNT,10);
	}
	else{
	    loop_ct = DivRem(mGm_PLCNT,10);
	}
	p_oam = &OamBak[PLSEL_IPT];
	
	p_oam->HPos = 0x88+(t_i<<3);	// Ｘ座標
	p_oam->VPos = 137+PLW1;			// Ｙ座標
	p_oam->CharNo = 0x106+loop_ct;
	p_oam->Pltt = 8;
	PLSEL_IPT++;
    }
}

/*--------------------------------------------------------------*/
/*		始まりの画面用OAMセット				*/
/*--------------------------------------------------------------*/
void hajimari_oam_set( void )
{
    OamData *p_oam;
    u8	patrn = 0;

    // コースマーク
    p_oam = &OamBak[0];
    p_oam->HPos = 0x168+(WORDNO-CHAPTN*3)*0x10 - mGm_SCCH1;
    p_oam->VPos = 0x20;
    p_oam->CharNo = 0x3;
    p_oam->Pltt = 0xD;
    
    // バー
    if( 0x60+(WORDNO-CHAPTN*3)*0x28 - mGm_SCCH1 < -0x18 )
	return;

    if( mGm_FRAME_COUNT & 0x20 ){
	patrn = (COS_CLEAR[WORDNO>>3]>>(WORDNO&7))&1;

	if( patrn ){
	    if( (mGm_FRAME_COUNT&0x1F) == 0x1F )
		m4aSongNumStart(s_u_se_coin);
	}
	else{
	    if( (mGm_FRAME_COUNT&0x1F) == 0 )
		m4aSongNumStart(s_u_se_coin);
	}

	p_oam = &OamBak[1];
	p_oam->HPos = 0x60+(WORDNO-CHAPTN*3)*0x28 - mGm_SCCH1;
	p_oam->VPos = 0x18+CHAPTN*0x10;
	p_oam->Shape = 1;
	p_oam->Pltt = 0xD;

	p_oam = &OamBak[2];
	p_oam->HPos = 0x70+(WORDNO-CHAPTN*3)*0x28 - mGm_SCCH1;
	p_oam->VPos = 0x18+CHAPTN*0x10;
	p_oam->Pltt = 0xD;

	if( patrn ){
	    OamBak[1].CharNo = 0x4;
	    OamBak[2].CharNo = 0x6;
	}
	else{
	    OamBak[1].CharNo = 0x0;
	    OamBak[2].CharNo = 0x2;
	}
    }
}

/*--------------------------------------------------------------*/
/*		始まりの画面コースクリアBGセット		*/
/*--------------------------------------------------------------*/
void hajimari_course_set( void )
{
    u8	flag, bit, cosdt, svdt;
    u8	t_i, cosfg, redfg, chaptn, wldno;
    u16 bar_pnt;

    for( t_i = 0; t_i < 20; t_i++ ){
	chaptn = Div(t_i, 3);
	wldno = t_i - chaptn*3;

	bar_pnt = wldno*0xA+chaptn*0x80;

	cosfg = (COS_CLEAR[t_i>>3]>>(t_i&7))&1;

	cosdt = (t_i*5);		// saveデータの何ビット目か
	bit = cosdt & 7;		// saveデータの配列の何ビット目か
	flag = cosdt>>3;		// saveデータの配列何個目か
	
	// 取ってきたいデータの先頭を先頭に8ビットsvdtに入れる
	svdt = (RED_COIN[flag]>>bit) | (RED_COIN[flag+1]<<(8-bit));
	redfg = svdt&0x1F;	// 今までに取ったかデータロード

	if( cosfg ){
	    if( (redfg&0x1F) == 0x1F ){
		*(vu16 *)(SLBG_BASE1+0x0D8+bar_pnt) =
		     0xD005;
		*(vu16 *)(SLBG_BASE1+0x0DA+bar_pnt) =
		     0xD006;
		*(vu16 *)(SLBG_BASE1+0x0DC+bar_pnt) =
		     0xD007;
	    }
	    else{
		*(vu16 *)(SLBG_BASE1+0x0D8+bar_pnt) =
		     0xD002;
		*(vu16 *)(SLBG_BASE1+0x0DA+bar_pnt) =
		     0xD003;
		*(vu16 *)(SLBG_BASE1+0x0DC+bar_pnt) =
		     0xD004;
	    }
	}
    }
}

#if 0
static void Color_Data(void)
{
    u8 t_i, t_j;
    u16 t_k;
    u32 Pltt_tmp;
    u32 Pltt_C[0x80];

    DmaClear(3, 0, &Pltt_C[0], 0x200, 16);
    for( t_i = 0; t_i < 4; t_i++ ){
	for( t_j = 0; t_j < 0x10; t_j++ ){
	    t_k = 0x10*t_i+t_j;
	    Pltt_tmp = (Pltt_A[t_k]&0x1F) | 
		(((Pltt_A[t_k]>>5)&0x1F)<<8) | 
		(((Pltt_A[t_k]>>10)&0x1F)<<16);
	    Pltt_C[t_k] = Pltt_tmp;
	    Pltt_tmp = (Pltt_B[t_k]&0x1F) | 
		(((Pltt_B[t_k]>>5)&0x1F)<<8) | 
		(((Pltt_B[t_k]>>10)&0x1F)<<16);
	    Pltt_C[t_k+0x40] = Pltt_tmp;
	}
    }
}
#endif
/*--------------------------------------------------------------*/
/*	プレイヤーオブジェクトカラー変更処理			*/
/*--------------------------------------------------------------*/
void Color_Change(void)
{
    u8 t_i, t_j;
    u16 t_k;
    u16 RGB1, RGB2, RGB3;
    u32 Pltt_tmp;
    u16 Rate;
    u16 Pltt_C[0x40];
    Pl_Sel_c *sel_pt;

    DmaArrayCopy(3, d_player_sel_sclDT, COL_BUF, 16);
    DmaArrayCopy(3, d_player_selobj_sclDT, COL_BUF+0x200, 16);
    COL_FLAG = 1;
//    Color_Data();
    for( t_i = 0; t_i < 4; t_i++ ){
	if( t_i&1 )
	    sel_pt = &PSBASE[t_i^2];
	else
	    sel_pt = &PSBASE[t_i];
	Rate = 0x41 - PLSEL_YPOS(sel_pt);
	for( t_j = 0; t_j < 0x10; t_j++ ){
	    t_k = 0x10*t_i+t_j;
	    RGB1 = ((Pltt_D[t_k]&0x1F)*(0x10 - Rate)+
		    (Pltt_D[t_k+0x40]&0x1F)*Rate)>>4;
	    RGB2 = (((Pltt_D[t_k]>>8)&0x1F)*(0x10 - Rate)+
		    ((Pltt_D[t_k+0x40]>>8)&0x1F)*Rate)>>4;
	    RGB3 = (((Pltt_D[t_k]>>16)&0x1F)*(0x10 - Rate)+
		    ((Pltt_D[t_k+0x40]>>16)&0x1F)*Rate)>>4;
	    Pltt_tmp = RGB1 | (RGB2<<5) | (RGB3<<10);
#if 0
	    RGB1 = Div(((Pltt_D[t_k]&0x1F)*(0x10 - Rate)+
			(Pltt_D[t_k+0x40]&0x1F)*Rate)<<8, 0x10);
	    RGB2 = Div((((Pltt_D[t_k]>>8)&0x1F)*(0x10 - Rate)+
			((Pltt_D[t_k+0x40]>>8)&0x1F)*Rate)<<8, 0x10);
	    RGB3 = Div((((Pltt_D[t_k]>>16)&0x1F)*(0x10 - Rate)+
			((Pltt_D[t_k+0x40]>>16)&0x1F)*Rate)<<8, 0x10);
	    Pltt_tmp = (RGB1>>8) | ((RGB2>>8)<<5) | ((RGB3>>8)<<10);
#endif
	    Pltt_C[t_k] = Pltt_tmp&0x7FFF;
	}
    }
    DmaCopy(3, &Pltt_C[0], COL_BUF+0x200, 0x80, 16);
}
/*--------------------------------------------------------------*/
/*	プレイヤーセレクト用領域確保				*/
/*--------------------------------------------------------------*/
void mGm_MALLOC_p_sel(void)
{
    if( p_sel == NULL ){
	p_sel = (aAll_PlSel_c *)mGm_MALLOC(sizeof(aAll_PlSel_c));
    }
    DmaClear(3, 0, p_sel, sizeof(aAll_PlSel_c), 16);
}
/*--------------------------------------------------------------*/
/*	プレイヤーセレクト用領域開放				*/
/*--------------------------------------------------------------*/
void mGm_FREE_p_sel(void)
{
    if( p_sel != NULL ){
	mGm_FREE(p_sel);
	p_sel = NULL;
    }
}
@


1.1
log
@Initial revision
@
text
@d14 2
a15 2
static u16 ParamChr_Tbl[] = {
//  x:      y:      Chr     shape size
d22 16
d41 2
a42 1
    0x0000, 0x0000, 0x0112, 0x0000, // C
d57 7
d67 1
a67 1
    0x0006, // loop 回数
d69 16
a84 6
    0x0000, 0x011C, // M
    0x0008, 0x0110, // A
    0x0010, 0x0126, // R
    0x0018, 0x0118, // I
    0x0020, 0x011E, // O
    0x0028, 0x0125, // X
d87 1
a87 1
    0x0006, // loop 回数
d89 15
a103 6
    0x0000, 0x011B, // L
    0x0008, 0x0129, // U
    0x0010, 0x0118, // I
    0x0018, 0x0116, // G
    0x0020, 0x0118, // I
    0x0028, 0x0125, // X
d106 1
a106 1
    0x0005, // loop 回数
d108 15
a122 5
    0x0000, 0x0128, // T
    0x0008, 0x011E, // O
    0x0010, 0x0110, // A
    0x0018, 0x0113, // D
    0x0020, 0x0125, // X
d125 1
a125 1
    0x0006, // loop 回数
d127 15
a141 6
    0x0000, 0x011F, // P
    0x0008, 0x0114, // E
    0x0010, 0x0110, // A
    0x0018, 0x0112, // C
    0x0020, 0x0117, // H
    0x0028, 0x0125, // X
d539 1
a539 1
    for( t_i = 0; t_i < 0xD; t_i++ ){
d544 5
a548 2
	p_oam->Shape = 0;
	p_oam->Size = 0;
d692 1
a692 1
    for( t_i = 0; t_i < 6; t_i++ ){
d769 3
a771 3
	if( SEL_CHR != 2 ){
	    p_oam->HPos = 0x58+*name_pt;	// Ｘ座標
	}
d775 1
d777 7
a783 1
	p_oam->VPos = 137+PLW1;			// Ｙ座標
@


1.1.1.1
log
@start
@
text
@@
